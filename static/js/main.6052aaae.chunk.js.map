{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","person","className","alt","src","name","birth_year","CardList","props","people","map","key","SearchBox","onSearchChange","placeholder","onChange","type","App","event","setState","searchField","target","value","state","fetch","then","res","json","data","results","this","filteredPeople","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,YAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,OAAOC,IAAG,mCAA8BH,EAAOI,KAArC,4BACnB,gCAAMJ,EAAOI,KAAb,KACA,kDAAiBJ,EAAOK,gBCJvBC,EAAW,SAACC,GACrB,OACI,yBAAKN,UAAU,aAEPM,EAAMC,OAAOC,KAAI,SAAAT,GAAM,OACnB,kBAAC,EAAD,CAAMU,IAAKV,EAAOI,KAAMJ,OAAQA,SCPvCW,G,MAAY,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YACxC,OACI,6BACI,2BACIZ,UAAU,SACVa,SAAUF,EACVG,KAAK,SACLF,YAAaA,OC8BdG,G,wDAjCb,aAAe,IAAD,8BACZ,gBAaFJ,eAAiB,SAACK,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXd,OAAQ,GACRW,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,iCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACV,OAAQmB,EAAKC,e,+BAOpC,IAAD,EACyBC,KAAKP,MAA7Bd,EADD,EACCA,OAAQW,EADT,EACSA,YACVW,EAAiBtB,EAAOuB,QAAO,SAAA/B,GAAM,OACzCA,EAAOI,KAAK4B,cAAcC,SAASd,EAAYa,kBAEjD,OACE,yBAAK/B,UAAU,OACb,iDACA,kBAAC,EAAD,CAAWW,eAAgBiB,KAAKjB,eAAgBC,YAAY,gCAC5D,kBAAC,EAAD,CAAUL,OAAQsB,S,GA5BRI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6052aaae.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = ({ person }) => {\n\n    return (\n        <div className='card-container'>\n            <img alt='jedi' src={`https://www.robohash.org/${person.name}?set=set3&size=125x125`} />\n            <h1> {person.name} </h1>\n            <p> {`Born in: ${person.birth_year}`}</p>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.styles.css';\n\nimport { Card } from '../card/card.component';\n \nexport const CardList = (props) => {\n    return (\n        <div className='card-list'>\n            {\n                props.people.map(person => (\n                    <Card key={person.name} person={person}/>\n            ))}\n        </div>\n    )\n};","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ onSearchChange, placeholder }) => {\n    return (\n        <div>\n            <input \n                className='search'\n                onChange={onSearchChange} \n                type='search' \n                placeholder={placeholder} />\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://swapi.dev/api/people/')\n      .then(res => res.json())\n      .then(data => this.setState({people: data.results}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  render() {\n    const { people, searchField } = this.state;\n    const filteredPeople = people.filter(person => \n      person.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n    return (\n      <div className=\"App\">\n        <h1>Star Wars Rolodex</h1>\n        <SearchBox onSearchChange={this.onSearchChange} placeholder='search Star Wars characters' />\n        <CardList people={filteredPeople} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}